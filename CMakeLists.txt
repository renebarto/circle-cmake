cmake_minimum_required(VERSION 3.18)

message(STATUS "CMake ${CMAKE_VERSION}")

set(SCRIPTS_DIR "" CACHE STRING "CMake scripts path")

if ("${SCRIPTS_DIR}" STREQUAL "")
    set(SCRIPTS_DIR "${CMAKE_SOURCE_DIR}/cmake" CACHE STRING "CMake scripts path" FORCE)
endif()

list(APPEND CMAKE_MODULE_PATH ${SCRIPTS_DIR})

include (functions)

get_git_tag(GIT_TAG)

message(STATUS "Tag found: ${GIT_TAG}")

if (NOT "${GIT_TAG}" STREQUAL "")
    string(REGEX MATCH "^[0-9]*\.[0-9]*\.[0-9]*" VERSION_NUMBER ${GIT_TAG})
endif()

if("${VERSION_NUMBER}" STREQUAL "")
    set(VERSION_NUMBER 0.0.0)
endif()

parse_version(VERSION_NUMBER VERSION_MAJOR VERSION_MINOR VERSION_LEVEL VERSION_BUILD)

set(VERSION_COMPOSED ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_LEVEL}.${VERSION_BUILD})
message(STATUS "Version: ${VERSION_COMPOSED}")

if("${CMAKE_BUILD_TYPE}" STREQUAL "")
    set(CMAKE_BUILD_TYPE Debug)
endif()
set(CONFIG_DIR ${CMAKE_BUILD_TYPE})

set(DEPLOYMENT_DIR "${CMAKE_SOURCE_DIR}/deploy" CACHE STRING "Deployment directory")
set(OUTPUT_BASE_DIR "${CMAKE_SOURCE_DIR}/output" CACHE STRING "Output directory")
set(OUTPUT_BIN_DIR "${OUTPUT_BASE_DIR}/${CONFIG_DIR}/bin")
set(OUTPUT_LIB_DIR "${OUTPUT_BASE_DIR}/${CONFIG_DIR}/lib")

option(VERBOSE_BUILD "Verbose build" ON)

if (VERBOSE_BUILD)
    set(CMAKE_VERBOSE_MAKEFILE ON CACHE STRING "Verbose build" FORCE)
else()
    set(CMAKE_VERBOSE_MAKEFILE OFF CACHE STRING "Verbose build" FORCE)
endif()
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_COLOR_MAKEFILE   ON)

if("${BAREMETAL_TARGET}" STREQUAL "")
    set(BAREMETAL_TARGET "RPI3") # Board type (RPI3/RPI4/RPI5)
endif()

if (BAREMETAL_TARGET STREQUAL "RPI3")
    message(STATUS "Building for Raspberry Pi 3")
elseif (BAREMETAL_TARGET STREQUAL "RPI4")
    message(STATUS "Building for Raspberry Pi 4")
elseif (BAREMETAL_TARGET STREQUAL "RPI5")
    message(STATUS "Building for Raspberry Pi 5")
else()
    message(FATAL_ERROR "Incorrect target ${BAREMETAL_TARGET} specified, must be RPI3, RPI4 or RPI5")
endif()

option(BAREMETAL_QEMU "Add support for QEMU" ON)
option(BAREMETAL_SAVE_VFP_REGISTERS_ON_FIQ "Save vector floating point registers on FIQ handling" OFF)
option(BAREMETAL_SAVE_VFP_REGISTERS_ON_IRQ "Save vector floating point registers on IRQ handling" OFF)

message(STATUS "\n** Setting up project **\n--")

message(STATUS "\n##################################################################################")
message(STATUS "\n** Setting up toolchain **\n--")

project(circle-main
    DESCRIPTION "Baremetal overall project")

set(PLATFORM_HOST_NAME ${CMAKE_HOST_SYSTEM_NAME})
set(PLATFORM_TARGET_NAME ${CMAKE_SYSTEM_NAME})
set(PLATFORM_TOOLCHAIN ${CMAKE_CXX_COMPILER_ID})

if("${CMAKE_HOST_SYSTEM_NAME}" STREQUAL "Linux")
    set(PLATFORM_HOST_LINUX TRUE)
    set(PLATFORM_TARGET_LINUX TRUE)
elseif("${CMAKE_HOST_SYSTEM_NAME}" STREQUAL "Windows")
    set(PLATFORM_HOST_WINDOWS TRUE)
    set(PLATFORM_TARGET_WINDOWS TRUE)
else()
    message(FATAL_ERROR "Unsupported platform " ${CMAKE_HOST_SYSTEM} "?")
endif()
if(NOT "${CMAKE_SYSTEM_NAME}" STREQUAL "${CMAKE_HOST_SYSTEM_NAME}")
    if("${CMAKE_SYSTEM_NAME}" STREQUAL "Linux")
        set(PLATFORM_TARGET_LINUX TRUE)
        set(PLATFORM_TOOLCHAIN_GCC TRUE)
    elseif("${CMAKE_SYSTEM_NAME}" STREQUAL "Generic")
        set(PLATFORM_TARGET_BAREMETAL TRUE)
        set(PLATFORM_TOOLCHAIN_GCC TRUE)
    elseif("${CMAKE_SYSTEM_NAME}" STREQUAL "Windows")
        set(PLATFORM_TARGET_WINDOWS TRUE)
    elseif("${CMAKE_SYSTEM_NAME}" STREQUAL "MSYS")
        set(PLATFORM_TARGET_MINGW TRUE)
        set(PLATFORM_TOOLCHAIN_GCC TRUE)
    else()
        message(FATAL_ERROR "Unsupported target platform " ${CMAKE_SYSTEM_NAME} "?")
    endif()
endif()

if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    set(PLATFORM_TOOLCHAIN_CLANG TRUE)
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    set(PLATFORM_TOOLCHAIN_GCC TRUE)
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "Intel")
    set(PLATFORM_TOOLCHAIN_INTEL TRUE)
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    set(PLATFORM_TOOLCHAIN_MSVC TRUE)
endif()

if (RASPPI EQUAL 3)
    set(BAREMETAL_ARCH_CPU_OPTIONS -mcpu=cortex-a53 -mlittle-endian)
    set(BAREMETAL_TARGET_KERNEL kernel8)
elseif (RASPPI EQUAL 4)
    set(BAREMETAL_ARCH_CPU_OPTIONS -mcpu=cortex-a72 -mlittle-endian)
    set(BAREMETAL_TARGET_KERNEL kernel8-rpi4)
elseif (RASPPI EQUAL 5)
    set(BAREMETAL_ARCH_CPU_OPTIONS -mcpu=cortex-a76 -mlittle-endian)
    set(BAREMETAL_TARGET_KERNEL kernel_2712)
endif()
set(BAREMETAL_LOAD_ADDRESS 0x80000)

set(DEFINES_C
    RASPPI=${RASPPI}
    AARCH=${AARCH}
    __circle__=${CIRCLEVER}
    )
set(DEFINES_C_DEBUG _DEBUG)
set(DEFINES_C_RELEASE NDEBUG)
set(DEFINES_C_MINSIZEREL NDEBUG)
set(DEFINES_C_RELWITHDEBINFO NDEBUG)
if (BAREMETAL_QEMU)
    list(APPEND DEFINES_C -DNO_SDHOST)
    if (AARCH EQUAL 32)
        list(APPEND DEFINES_C -DNO_PHYSICAL_COUNTER)
    endif()
endif()

set(DEFINES_ASM
    RASPPI=${RASPPI}
    AARCH=${AARCH}
    __circle__=${CIRCLEVER}
    )

set(FLAGS_C
    ${BAREMETAL_ARCH_CPU_OPTIONS}
    -Wall
    -Wextra
    -Werror
    -Wno-parentheses
    -ffreestanding
    -fsigned-char
    -nostartfiles
    -std=gnu99
    -mno-outline-atomics
    -nostdinc
    -nostdlib
)
# -g is added by CMake
set(FLAGS_C_DEBUG -O0 -Wno-unused-variable -Wno-unused-parameter)
# -O3 is added by CMake
set(FLAGS_C_RELEASE -D__USE_STRING_INLINES)
# -Os is added by CMake
set(FLAGS_C_MINSIZEREL -O3)
# -O2 -g is added by CMake
set(FLAGS_C_RELWITHDEBINFO )

set(FLAGS_CXX
    ${BAREMETAL_ARCH_CPU_OPTIONS}
    -Wall
    -Wextra
#    -Werror
    -Wno-missing-field-initializers
    -Wno-unused-value
    -Wno-aligned-new
    -ffreestanding
    -fsigned-char
    -nostartfiles
    -mno-outline-atomics
    -nostdinc
    -nostdlib
    -nostdinc++
    -fno-exceptions
    -fno-rtti
    )
if (AARCH EQUAL 32)
list(APPEND FLAGS_CXX -mno-unaligned-access)
else()
list(APPEND FLAGS_CXX -mstrict-align)
endif()

# -g is added by CMake
set(FLAGS_CXX_DEBUG -O0 -Wno-unused-variable -Wno-unused-parameter)
# -O3 is added by CMake
set(FLAGS_CXX_RELEASE -D__USE_STRING_INLINES)
# -Os is added by CMake
set(FLAGS_CXX_MINSIZEREL -O3)
# -O2 -g is added by CMake
set(FLAGS_CXX_RELWITHDEBINFO )

set(FLAGS_ASM ${BAREMETAL_ARCH_CPU_OPTIONS})
set(FLAGS_ASM_DEBUG -O2)
set(FLAGS_ASM_RELEASE -O2)
set(FLAGS_ASM_MINSIZEREL -O2)
set(FLAGS_ASM_RELWITHDEBINFO -O2)

set(LINK_FLAGS
    -Wl,--section-start=.init=${BAREMETAL_LOAD_ADDRESS}
    -T ${CMAKE_SOURCE_DIR}/circle.ld
    -nostdlib
    -nostartfiles
    )
set(LINK_FLAGS_DEBUG )
set(LINK_FLAGS_RELEASE )
set(LINK_FLAGS_MINSIZEREL )
set(LINK_FLAGS_RELWITHDEBINFO )

list(APPEND LINK_LIBRARIES )
list(APPEND LINK_DIRECTORIES )

set(SUPPORTED_CPP_STANDARD 17)

message(STATUS "C++ compiler version:    ${CMAKE_CXX_COMPILER_VERSION}")
message(STATUS "C compiler version:      ${CMAKE_C_COMPILER_VERSION}")
message(STATUS "C++ supported standard:  ${SUPPORTED_CPP_STANDARD}")

set(COMPILE_DEFINITIONS_C_DEBUG ${DEFINES_C} ${DEFINES_C_DEBUG})
set(COMPILE_DEFINITIONS_C_RELEASE ${DEFINES_C} ${DEFINES_C_RELEASE})
set(COMPILE_DEFINITIONS_C_MINSIZEREL ${DEFINES_C} ${DEFINES_C_MINSIZEREL})
set(COMPILE_DEFINITIONS_C_RELWITHDEBINFO ${DEFINES_C} ${DEFINES_C_RELWITHDEBINFO})

set(COMPILE_DEFINITIONS_ASM_DEBUG ${DEFINES_ASM} ${DEFINES_ASM_DEBUG})
set(COMPILE_DEFINITIONS_ASM_RELEASE ${DEFINES_ASM} ${DEFINES_ASM_RELEASE})
set(COMPILE_DEFINITIONS_ASM_MINSIZEREL ${DEFINES_ASM} ${DEFINES_ASM_MINSIZEREL})
set(COMPILE_DEFINITIONS_ASM_RELWITHDEBINFO ${DEFINES_ASM} ${DEFINES_ASM_RELWITHDEBINFO})

set(COMPILE_OPTIONS_C_DEBUG ${FLAGS_C} ${FLAGS_C_DEBUG})
set(COMPILE_OPTIONS_C_RELEASE ${FLAGS_C} ${FLAGS_C_RELEASE})
set(COMPILE_OPTIONS_C_MINSIZEREL ${FLAGS_C} ${FLAGS_C_MINSIZEREL})
set(COMPILE_OPTIONS_C_RELWITHDEBINFO ${FLAGS_C} ${FLAGS_C_RELWITHDEBINFO})

set(COMPILE_OPTIONS_CXX_DEBUG ${FLAGS_CXX} ${FLAGS_CXX_DEBUG})
set(COMPILE_OPTIONS_CXX_RELEASE ${FLAGS_CXX} ${FLAGS_CXX_RELEASE})
set(COMPILE_OPTIONS_CXX_MINSIZEREL ${FLAGS_CXX} ${FLAGS_CXX_MINSIZEREL})
set(COMPILE_OPTIONS_CXX_RELWITHDEBINFO ${FLAGS_CXX} ${FLAGS_CXX_RELWITHDEBINFO})

set(COMPILE_OPTIONS_ASM_DEBUG ${FLAGS_ASM} ${FLAGS_ASM_DEBUG})
set(COMPILE_OPTIONS_ASM_RELEASE ${FLAGS_ASM} ${FLAGS_ASM_RELEASE})
set(COMPILE_OPTIONS_ASM_MINSIZEREL ${FLAGS_ASM} ${FLAGS_ASM_MINSIZEREL})
set(COMPILE_OPTIONS_ASM_RELWITHDEBINFO ${FLAGS_ASM} ${FLAGS_ASM_RELWITHDEBINFO})

set(LINKER_OPTIONS_DEBUG ${LINK_FLAGS} ${LINK_FLAGS_DEBUG})
set(LINKER_OPTIONS_RELEASE ${LINK_FLAGS} ${LINK_FLAGS_RELEASE})
set(LINKER_OPTIONS_MINSIZEREL ${LINK_FLAGS} ${LINK_FLAGS_MINSIZEREL})
set(LINKER_OPTIONS_RELWITHDEBINFO ${LINK_FLAGS} ${LINK_FLAGS_RELWITHDEBINFO})

if (PLATFORM_BAREMETAL)
    set(LINKER_START_GROUP -Wl,--start-group)
    set(LINKER_END_GROUP -Wl,--end-group)
endif()

set(LINKER_LIBRARIES ${LINK_LIBRARIES})

if(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
    set(COMPILE_DEFINITIONS_C ${COMPILE_DEFINITIONS_C_DEBUG})
    set(COMPILE_DEFINITIONS_ASM ${COMPILE_DEFINITIONS_ASM_DEBUG})
    set(COMPILE_OPTIONS_C ${COMPILE_OPTIONS_C_DEBUG})
    set(COMPILE_OPTIONS_CXX ${COMPILE_OPTIONS_CXX_DEBUG})
    set(COMPILE_OPTIONS_ASM ${COMPILE_OPTIONS_ASM_DEBUG})
    set(LINKER_OPTIONS ${LINKER_OPTIONS_DEBUG})
elseif(${CMAKE_BUILD_TYPE} STREQUAL "Release")
    set(COMPILE_DEFINITIONS_C ${COMPILE_DEFINITIONS_C_RELEASE})
    set(COMPILE_DEFINITIONS_ASM ${COMPILE_DEFINITIONS_ASM_RELEASE})
    set(COMPILE_OPTIONS_C ${COMPILE_OPTIONS_C_RELEASE})
    set(COMPILE_OPTIONS_CXX ${COMPILE_OPTIONS_CXX_RELEASE})
    set(COMPILE_OPTIONS_ASM ${COMPILE_OPTIONS_ASM_RELEASE})
    set(LINKER_OPTIONS ${LINKER_OPTIONS_RELEASE})
elseif(${CMAKE_BUILD_TYPE} STREQUAL "MinSizeRel")
    set(COMPILE_DEFINITIONS_C ${COMPILE_DEFINITIONS_C_MINSIZEREL})
    set(COMPILE_DEFINITIONS_ASM ${COMPILE_DEFINITIONS_ASM_MINSIZEREL})
    set(COMPILE_OPTIONS_C ${COMPILE_OPTIONS_C_MINSIZEREL})
    set(COMPILE_OPTIONS_CXX ${COMPILE_OPTIONS_CXX_MINSIZEREL})
    set(COMPILE_OPTIONS_ASM ${COMPILE_OPTIONS_ASM_MINSIZEREL})
    set(LINKER_OPTIONS ${LINKER_OPTIONS_MINSIZEREL})
elseif(${CMAKE_BUILD_TYPE} STREQUAL "RelWithDebInfo")
    set(COMPILE_DEFINITIONS_C ${COMPILE_DEFINITIONS_C_RELWITHDEBINFO})
    set(COMPILE_DEFINITIONS_ASM ${COMPILE_DEFINITIONS_ASM_RELWITHDEBINFO})
    set(COMPILE_OPTIONS_C ${COMPILE_OPTIONS_C_RELWITHDEBINFO})
    set(COMPILE_OPTIONS_CXX ${COMPILE_OPTIONS_CXX_RELWITHDEBINFO})
    set(COMPILE_OPTIONS_ASM ${COMPILE_OPTIONS_ASM_RELWITHDEBINFO})
    set(LINKER_OPTIONS ${LINKER_OPTIONS_RELWITHDEBINFO})
else()
    message(FATAL_ERROR "Invalid build type: " ${CMAKE_BUILD_TYPE})
endif()

find_program(HOST_GCC NAMES gcc x86_64-w64-mingw32-gcc.exe HINTS "C:/msys64/mingw64/bin")
if(NOT HOST_GCC)
    message(FATAL_ERROR "Host gcc not found!")
endif()
cmake_path(GET HOST_GCC PARENT_PATH MinGW_DIR)

find_program(7Zip NAMES 7z.exe 7z HINTS "C:/Program Files/7-Zip")
if(NOT 7Zip)
    message(FATAL_ERROR "7-zip not found!")
endif()

message(STATUS "Host gcc:                  ${HOST_GCC}")
message(STATUS "MinGW directory:           ${MinGW_DIR}")

message(STATUS "Baremetal settings:")
message(STATUS "-- Circle version:         ${CIRCLEVER}")
message(STATUS "-- RPI target:             ${RASPPI}")
message(STATUS "-- Architecture:           ${AARCH}")
message(STATUS "-- Architecture options:   ${BAREMETAL_ARCH_CPU_OPTIONS}")
message(STATUS "-- Kernel name:            ${BAREMETAL_TARGET_KERNEL}")
message(STATUS "-- Kernel load address:    ${BAREMETAL_LOAD_ADDRESS}")

message(STATUS "Variables:\n")

message(STATUS "SCRIPTS_DIR:               ${SCRIPTS_DIR}")
message(STATUS "CMAKE_BUILD_TYPE:          ${CMAKE_BUILD_TYPE}")
message(STATUS "CMAKE_HOST_SYSTEM:         ${CMAKE_HOST_SYSTEM}")
message(STATUS "CMAKE_HOST_SYSTEM_NAME:    ${CMAKE_HOST_SYSTEM_NAME}")
message(STATUS "CMAKE_SYSTEM_NAME:         ${CMAKE_SYSTEM_NAME}")
message(STATUS "PLATFORM_TOOLCHAIN:        ${PLATFORM_TOOLCHAIN}")
message(STATUS "CMAKE_CXX_COMPILER_ID:     ${CMAKE_CXX_COMPILER_ID}")
message(STATUS "CMAKE_VERBOSE_MAKEFILE:    ${CMAKE_VERBOSE_MAKEFILE}")
message(STATUS "PLATFORM_HOST_NAME:        ${PLATFORM_HOST_NAME}")
message(STATUS "PLATFORM_TARGET_NAME:      ${PLATFORM_TARGET_NAME}")
message(STATUS "PLATFORM_HOST_LINUX:       ${PLATFORM_HOST_LINUX}")
message(STATUS "PLATFORM_HOST_WINDOWS:     ${PLATFORM_HOST_WINDOWS}")
message(STATUS "PLATFORM_TARGET_LINUX:     ${PLATFORM_TARGET_LINUX}")
message(STATUS "PLATFORM_TARGET_WINDOWS:   ${PLATFORM_TARGET_WINDOWS}")
message(STATUS "PLATFORM_TOOLCHAIN_GCC:    ${PLATFORM_TOOLCHAIN_GCC}")
message(STATUS "PLATFORM_TOOLCHAIN_MSVC:   ${PLATFORM_TOOLCHAIN_MSVC}")
message(STATUS "PLATFORM_TOOLCHAIN_CLANG:  ${PLATFORM_TOOLCHAIN_CLANG}")
message(STATUS "PLATFORM_TOOLCHAIN_INTEL:  ${PLATFORM_TOOLCHAIN_INTEL}")
message(STATUS "C++ compiler version:      ${CMAKE_CXX_COMPILER_VERSION}")
message(STATUS "C compiler version:        ${CMAKE_C_COMPILER_VERSION}")
message(STATUS "C++ supported standard:    ${SUPPORTED_CPP_STANDARD}")

add_subdirectory(tools)
add_subdirectory(lib)
#add_subdirectory(addon)
add_subdirectory(sample)
