include(CMakeForceCompiler)

if ("$ENV{BAREMETAL_TOOLCHAIN_ROOT}" STREQUAL "")
    if (CMAKE_HOST_UNIX)
        set(TOOLCHAIN_ROOT "/opt/toolchains/arm-gnu-toolchain-13.3.rel1-x86_64-aarch64-none-elf")
    else()
        set(TOOLCHAIN_ROOT "D:/toolchains/arm-gnu-toolchain-13.3.rel1-mingw-w64-i686-aarch64-none-elf")
    endif()
else()
    set(TOOLCHAIN_ROOT $ENV{BAREMETAL_TOOLCHAIN_ROOT})
endif()

set(PLATFORM_BAREMETAL TRUE)
set(CMAKE_SYSTEM_NAME Generic)
set(CMAKE_SYSTEM_PROCESSOR aarch64)
set(TOOL_DESTINATION_PLATFORM aarch64-none-elf)

message(STATUS "TOOLCHAIN_ROOT           ${TOOLCHAIN_ROOT}")

set(CMAKE_VERBOSE_MAKEFILE ON)

set(TOOLCHAIN_PATH ${TOOLCHAIN_ROOT}/bin)
set(TOOLCHAIN_AUXILIARY_PATH ${TOOLCHAIN_ROOT}/lib/gcc/${TOOL_DESTINATION_PLATFORM}/13.3.1)

if (CMAKE_HOST_UNIX)
    set(CMAKE_C_COMPILER ${TOOLCHAIN_PATH}/${TOOL_DESTINATION_PLATFORM}-gcc CACHE FILEPATH "C compiler" FORCE)
    set(CMAKE_C_COMPILER_FORCED ${TOOLCHAIN_PATH}/${TOOL_DESTINATION_PLATFORM}-gcc CACHE FILEPATH "C compiler" FORCE)

    set(CMAKE_CXX_COMPILER ${TOOLCHAIN_PATH}/${TOOL_DESTINATION_PLATFORM}-g++ CACHE FILEPATH "C++ compiler" FORCE)
    set(CMAKE_CXX_COMPILER_FORCED ${TOOLCHAIN_PATH}/${TOOL_DESTINATION_PLATFORM}-g++ CACHE FILEPATH "C++ compiler" FORCE)

    set(CMAKE_AR ${TOOLCHAIN_PATH}/${TOOL_DESTINATION_PLATFORM}-ar CACHE FILEPATH "Library creator" FORCE)

    set(CMAKE_LINKER ${TOOLCHAIN_PATH}/${TOOL_DESTINATION_PLATFORM}-ld CACHE FILEPATH "Linker" FORCE)

    set(CMAKE_OBJCOPY ${TOOLCHAIN_PATH}/${TOOL_DESTINATION_PLATFORM}-objcopy CACHE FILEPATH "ObjCopy tool" FORCE)
    set(CMAKE_OBJDUMP ${TOOLCHAIN_PATH}/${TOOL_DESTINATION_PLATFORM}-objdump CACHE FILEPATH "ObjDump tool" FORCE)
    set(CMAKE_CPPFILT ${TOOLCHAIN_PATH}/${TOOL_DESTINATION_PLATFORM}-c++filt CACHE FILEPATH "C++Filt tool" FORCE)
else()
    set(CMAKE_C_COMPILER ${TOOLCHAIN_PATH}/${TOOL_DESTINATION_PLATFORM}-gcc.exe CACHE FILEPATH "C compiler" FORCE)
    set(CMAKE_C_COMPILER_FORCED ${TOOLCHAIN_PATH}/${TOOL_DESTINATION_PLATFORM}-gcc.exe CACHE FILEPATH "C compiler" FORCE)

    set(CMAKE_CXX_COMPILER ${TOOLCHAIN_PATH}/${TOOL_DESTINATION_PLATFORM}-g++.exe CACHE FILEPATH "C++ compiler" FORCE)
    set(CMAKE_CXX_COMPILER_FORCED ${TOOLCHAIN_PATH}/${TOOL_DESTINATION_PLATFORM}-g++.exe CACHE FILEPATH "C++ compiler" FORCE)

    set(CMAKE_AR ${TOOLCHAIN_PATH}/${TOOL_DESTINATION_PLATFORM}-ar.exe CACHE FILEPATH "Library creator" FORCE)

    set(CMAKE_LINKER ${TOOLCHAIN_PATH}/${TOOL_DESTINATION_PLATFORM}-ld.exe CACHE FILEPATH "Linker" FORCE)

    set(CMAKE_OBJCOPY ${TOOLCHAIN_PATH}/${TOOL_DESTINATION_PLATFORM}-objcopy.exe CACHE FILEPATH "ObjCopy tool" FORCE)
    set(CMAKE_OBJDUMP ${TOOLCHAIN_PATH}/${TOOL_DESTINATION_PLATFORM}-objdump.exe CACHE FILEPATH "ObjDump tool" FORCE)
    set(CMAKE_CPPFILT ${TOOLCHAIN_PATH}/${TOOL_DESTINATION_PLATFORM}-c++filt.exe CACHE FILEPATH "C++Filt tool" FORCE)
endif()

set(STDDEF_INCPATH ${TOOLCHAIN_AUXILIARY_PATH}/include)

message(STATUS "Processor                ${CMAKE_SYSTEM_PROCESSOR}")
message(STATUS "Platform tuple           ${TOOL_DESTINATION_PLATFORM}")
message(STATUS "Assembler                ${CMAKE_ASM_COMPILER}")
message(STATUS "C compiler               ${CMAKE_C_COMPILER}")
message(STATUS "C++ compiler             ${CMAKE_CXX_COMPILER}")
message(STATUS "Archiver                 ${CMAKE_AR}")
message(STATUS "Linker                   ${CMAKE_LINKER}")
message(STATUS "ObjCopy                  ${CMAKE_OBJCOPY}")
message(STATUS "Std include path         ${STDDEF_INCPATH}")

if ("${CMAKE_EXE_LINKER_FLAGS}" STREQUAL "")
	set(HAVE_AUX_PATH false)
else()
	list(FIND ${CMAKE_EXE_LINKER_FLAGS} -L${TOOLCHAIN_AUXILIARY_PATH} HAVE_AUX_PATH)
endif()
message(STATUS "CMAKE_EXE_LINKER_FLAGS=  ${CMAKE_EXE_LINKER_FLAGS}")
if (NOT HAVE_AUX_PATH)
	message(STATUS "Adding to CMAKE_EXE_LINKER_FLAGS -L${TOOLCHAIN_AUXILIARY_PATH}")
	set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -L${TOOLCHAIN_AUXILIARY_PATH}" CACHE INTERNAL "" FORCE)
endif()

set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
